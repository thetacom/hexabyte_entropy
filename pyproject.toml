[tool.poetry]
name = "hexabyte_entropy"
version = "0.1.3"
description = "An entropy plugin for the hexabyte hex editor."
keywords = ["commandline", "hexabyte", "hexeditor", "plugin", "sidebar", "entropy"]
repository = "https://github.com/thetacom/hexabyte_entropy"
authors = ["Justin C <justin@thetacom.info>"]
readme = "docs/README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
packages = [{ include = 'hexabyte_entropy' }]

[tool.poetry.dependencies]
python       = "^3.9"
hexabyte     = "^0.8.3"
hilbertcurve = "^2.0.5"

[tool.poetry.group.dev.dependencies]
black                  = "^23.3.0"
bandit                 = "^1.7.5"
coverage               = "^7.2.3"
deepdiff               = "^6.3.0"
ipython                = "^8.13.2"
isort                  = "^5.12.0"
httpretty              = "^1.1.4"
livereload             = "^2.6.3"
mkdocs                 = "^1.4.2"
mkdocstrings           = "^0.21.2"
mkdocs-jupyter         = "^0.24.1"
mkdocs-material        = "^9.1.8"
mkdocs-mermaid2-plugin = "^0.6.0"
mkdocs-minify-plugin   = "^0.6.4"
mkdocs-redirects       = "^1.2.0"
matplotlib             = "^3.7.1"
msgpack                = "^1.0.5"
mypy                   = "^1.2.0"
pydocstyle             = "^6.3.0"
pylint                 = "^2.17.3"
pytest                 = "^7.3.1"
pytest-bandit          = "^0.6.1"
pytest-cov             = "^4.0.0"
pytest-mock            = "^3.10.0"
pytest-pydocstyle      = "^2.3.2"
pytest-sugar           = "^0.9.7"
pre-commit             = "^3.2.2"
ruff                   = "^0.0.263"
tox                    = "^4.5.1"
types-toml             = "^0.10.8.5"
typing-extensions      = "^4.5.0"
zipp                   = "^3.15.0"

[build-system]
requires      = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]

[tool.bandit]
targets      = ["hexabyte_entropy"]
skips        = []
exclude_dirs = ["docs", "tests"]

[tool.black]
line-length    = 120
target-version = ['py39']

[tool.coverage.run]
source = ['hexabyte_entropy']

[tool.isort]
py_version  = 39
profile     = "black"
src_paths   = ["hexabyte_entropy", "tests"]
line_length = 120

[tool.pydocstringformatter]
write                          = true
strip-whitespaces              = true
split-summary-body             = false
numpydoc-section-hyphen-length = false

[tool.pytest.ini_options]
minversion = "7.1"
addopts    = "-ra --doctest-modules --cov --cov-branch --cov-fail-under=0 --cov-report=term-missing --cov-report=html:reports/coverage --junit-xml=reports/pytest.xml"
testpaths  = ["tests"]

[tool.pylint.main]
# exit-zero =
fail-under              = 10
ignore                  = ["CVS", ".venv", "tests"]
ignore-paths            = ["docs/*"]
ignore-patterns         = ["^\\.#"]
jobs                    = 0
limit-inference-results = 100
# load-plugins =
persistent      = true
py-version      = "3.9"
recursive       = true
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style        = "snake_case"
attr-naming-style            = "snake_case"
bad-names                    = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style     = "UPPER_CASE"
class-naming-style           = "PascalCase"
const-naming-style           = "UPPER_CASE"
docstring-min-length         = -1
function-naming-style        = "snake_case"
good-names                   = ["f", "i", "j", "k", "x", "y", "z", "ex", "Run", "_", "id"]
inlinevar-naming-style       = "any"
method-naming-style          = "snake_case"
module-naming-style          = "snake_case"
no-docstring-rgx             = "^_"
property-classes             = ["abc.abstractproperty"]
variable-naming-style        = "snake_case"

[tool.pylint.classes]
defining-attr-methods                 = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected                     = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg           = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args           = 10
max-attributes     = 15
max-bool-expr      = 5
max-branches       = 12
max-locals         = 15
max-parents        = 7
max-public-methods = 30
max-returns        = 6
max-statements     = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines  = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string      = "    "
max-line-length    = 120
max-module-lines   = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules      = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = [
    "import-error",
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
]
enable = ["c-extension-no-member"]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks         = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score      = true

[tool.pylint.similarities]
ignore-comments      = true
ignore-docstrings    = true
ignore-imports       = true
ignore-signatures    = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions           = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = true
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]

[tool.pyright]
include = ["hexabyte_entropy"]
exclude = ["docs", "**/__pycache__"]
venv    = ".venv"

reportGeneralTypeIssues = false
reportMissingImports    = true
reportMissingTypeStubs  = false

pythonVersion  = "3.9"
pythonPlatform = "Linux"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select  = ["D", "E", "F", "I", "N", "PL", "UP"]
ignore  = ["D203", "D213", "PLR0913"]
exclude = ["tests"]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
